(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{281:function(e){e.exports={data:{tag:{title:"Linux",belongsTo:{edges:[{node:{title:"How to structure a Sass project",path:"/how-to-structure-a-sass-project",date:"24. May 2019",timeToRead:1,description:"Sassy sass",coverImage:null,content:'<h1 id="how-to-structure-a-sass-project-"><a href="#how-to-structure-a-sass-project-" aria-hidden="true"><span class="icon icon-link"></span></a>How to structure a Sass project :</h1>\n<h3 id="basic-directory-structure-"><a href="#basic-directory-structure-" aria-hidden="true"><span class="icon icon-link"></span></a>Basic directory structure :</h3>\n<pre class="language-text">stylesheets/\n|\n|-- modules/              # Common modules\n|   |-- _all.scss         # Include to get all modules\n|   |-- _utility.scss     # Module name\n|   |-- _colors.scss      # Etc...\n|   ...\n|\n|-- partials/             # Partials\n|   |-- _base.sass        # imports for all mixins + global project variables\n|   |-- _buttons.scss     # buttons\n|   |-- _figures.scss     # figures\n|   |-- _grids.scss       # grids\n|   |-- _typography.scss  # typography\n|   |-- _reset.scss       # reset\n|   ...\n|\n|-- vendor/               # CSS or Sass from other projects\n|   |-- _colorpicker.scss\n|   |-- _jquery.ui.core.scss\n|   ...\n|\n`-- main.scss            # primary Sass file</pre>\n<h3 id="primary-stylesheet-"><a href="#primary-stylesheet-" aria-hidden="true"><span class="icon icon-link"></span></a>Primary stylesheet :</h3>\n<pre class="language-text">// Modules and Variables\n@import &quot;partials/base&quot;;\n\n// Partials\n@import &quot;partials/reset&quot;;\n@import &quot;partials/typography&quot;;\n@import &quot;partials/buttons&quot;;\n@import &quot;partials/figures&quot;;\n@import &quot;partials/grids&quot;;\n// ...\n\n// Third-party\n@import &quot;vendor/colorpicker&quot;;\n@import &quot;vendor/jquery.ui.core&quot;;\n </pre>\n<p>   As you can see this divides my project into three basic types of files. Modules, partials, </p>\n<p>   and vendored stylesheets.</p>\n<h4 id="module-"><a href="#module-" aria-hidden="true"><span class="icon icon-link"></span></a>Module :</h4>\n<p>   The modules directory is reserved for Sass code that doesn\'t cause Sass to actually output CSS. Things like mixin declarations, </p>\n<p>   functions, and variables.</p>\n<h4 id="partials-"><a href="#partials-" aria-hidden="true"><span class="icon icon-link"></span></a>Partials :</h4>\n'}},{node:{title:"Arch Linux Install",path:"/arch-linux-install",date:"9. April 2019",timeToRead:3,description:"Guide on how to install Arch Linux.",coverImage:null,content:'<h1 id="arch-linux-install"><a href="#arch-linux-install" aria-hidden="true"><span class="icon icon-link"></span></a>Arch Linux Install</h1>\n<h2 id="warning"><a href="#warning" aria-hidden="true"><span class="icon icon-link"></span></a>Warning</h2>\n<p>Copy and pasted from various sources. Use at your own risk etc.</p>\n<h2 id="prepare-the-hard-disk"><a href="#prepare-the-hard-disk" aria-hidden="true"><span class="icon icon-link"></span></a>Prepare the Hard disk</h2>\n<p>Boot <code class="language-text">gparted</code> from an usb-stick and configure your disk as follows:</p>\n<ol>\n<li>Set your partition table to MBR</li>\n<li>Create the fist partition (later used as <code class="language-text">/boot</code>): 200 MB, set the bootable flag, filesystem: ext3</li>\n<li>Create the second partition (later used with LVM, containing <code class="language-text">/</code>, <code class="language-text">/swap</code> and <code class="language-text">/home</code>): use the remaining space, leave it unformatted, set the LVM flag</li>\n</ol>\n<p>For more information on partitioning have a look at the Arch Linux wiki. If you don’t want to use <code class="language-text">gparted</code> you can just boot the Arch Linux Iso and use <code class="language-text">parted</code> or <code class="language-text">fdisk</code>. </p>\n<p>It’s also possible to use GPT instead of MBR you will need a third partition with about 2MB, but I won’t describe this here – just come back when you figured it out. Using a UEFI setup you also have to search for an other source of information ;)</p>\n<h2 id="boot-arch-linux-iso-from-usb-stick"><a href="#boot-arch-linux-iso-from-usb-stick" aria-hidden="true"><span class="icon icon-link"></span></a>Boot Arch Linux Iso from usb-stick</h2>\n<p>Search for your keyboard layout and activate it:</p>\n<pre class="language-text">loadkeys de-latin1-nodeadkeys.map.gz</pre>\n<p>Establish WiFi-connection if you don’t have wired access to the Internet:</p>\n<pre class="language-text">wifi-menu</pre>\n<h2 id="encrypt-partition-configure-lvm"><a href="#encrypt-partition-configure-lvm" aria-hidden="true"><span class="icon icon-link"></span></a>Encrypt partition, configure LVM</h2>\n<p>Load the kernel module for encryption:</p>\n<pre class="language-text">modprobe dm-crypt</pre>\n<p>Encrypt the big partition (sda2) with AES, 256 bit keylength (XTS splits the keylength). Have fun with the man and faq.</p>\n<pre class="language-text">cryptsetup -c aes-xts-plain64 -y -s 512 luksFormat /dev/sda2</pre>\n<p>And open it, so it will be in <code class="language-text">/dev/mapper/lvm</code>:</p>\n<pre class="language-text">cryptsetup luksOpen /dev/sda2 lvm</pre>\n<p>Create a physical volume, volume group, logical volumes (details):</p>\n<pre class="language-text">pvcreate /dev/mapper/lvm\nvgcreate main /dev/mapper/lvm\nlvcreate -L 20GB -n root main\nlvcreate -L 8GB -n swap main\nlvcreate -l 100%FREE -n home main</pre>\n<p>Now we need a filesystem on them:</p>\n<pre class="language-text">mkswap /dev/mapper/main-swap\nmkfs.ext4 /dev/mapper/main-root\nmkfs.ext4 /dev/mapper/main-home</pre>\n<h2 id="step-4-mount-volumes-install-arch-linux"><a href="#step-4-mount-volumes-install-arch-linux" aria-hidden="true"><span class="icon icon-link"></span></a>Step 4: Mount volumes, install Arch Linux</h2>\n<p>Mount the volumes into the running livesystem:</p>\n<pre class="language-text">mount /dev/mapper/main-root /mnt\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\nmkdir /mnt/home\nmount /dev/mapper/main-home /mnt/home</pre>\n<p>Install the base and base-devel packets to <code class="language-text">/mnt</code> (Internet-connection required):</p>\n<pre class="language-text">pacstrap /mnt base base-devel</pre>\n<p>Install GRUB2 to /mnt (part 1):</p>\n<pre class="language-text">pacstrap /mnt grub-bios</pre>\n<p>Generate fstab:</p>\n<pre class="language-text">genfstab -p -U /mnt &gt; /mnt/etc/fstab</pre>\n<h2 id="chroot-and-configure-the-system"><a href="#chroot-and-configure-the-system" aria-hidden="true"><span class="icon icon-link"></span></a>chroot and configure the system</h2>\n<p>Enter the chroot:</p>\n<pre class="language-text">arch-chroot /mnt</pre>\n<p>delete the <code class="language-text">#</code> in front of your language of choice (e.g. <code class="language-text">de_DE.UTF-8 UTF-8</code>) in locale.gen and generate the locale:</p>\n<pre class="language-text">vi /etc/locale.gen\nlocale-gen\necho LANG=de_DE.UTF-8 &gt; /etc/locale.conf\nexport LANG=de_DE.UTF-8</pre>\n<p>Generate /etc/vconsole.conf with the following 3 lines to bind your keys correctly:</p>\n<pre class="language-text">KEYMAP=&quot;de-latin1-nodeadkeys&quot;\nFONT=Lat2-Terminus16\nFONT_MAP=</pre>\n<p>Create a symbolic link /etc/localtime to your zone file <code class="language-text">/usr/share/zoneinfo/&lt;Zone&gt;/&lt;SubZone&gt;</code>:</p>\n<pre class="language-text">ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime</pre>\n<p>Define your hostename:</p>\n<pre class="language-text">echo archserv &gt; /etc/hostname\nsystemctl enable lvm.service</pre>\n<p>Edit /etc/mkinitcpio.conf: Put <code class="language-text">keymap</code>, <code class="language-text">encrypt</code> and <code class="language-text">lvm2</code> (in that order!) before <code class="language-text">filesystems</code> in the HOOKS array.</p>\n<p>Regenerate the ramdisk:</p>\n<pre class="language-text">mkinitcpio -p linux</pre>\n<p>Now install GRUB (part 2), on a device not a partition or a volume:</p>\n<pre class="language-text">grub-install /dev/sda</pre>\n<p>In /etc/default/grub edit the line <code class="language-text">GRUB_CMDLINE_LINUX=&quot;&quot;</code> to <code class="language-text">GRUB_CMDLINE_LINUX=”cryptdevice=/dev/sda2:main&quot;</code> then run:</p>\n<pre class="language-text">grub-mkconfig -o /boot/grub/grub.cfg</pre>\n<p>set your root password:</p>\n<pre class="language-text">passwd</pre>\n<p>Exit the chroot:</p>\n<pre class="language-text">exit</pre>\n<p>Unmount:</p>\n<pre class="language-text">umount /mnt/boot\numount /mnt/home\numount/mnt</pre>\n<p>Reboot into your new system.</p>\n<h2 id="postscript"><a href="#postscript" aria-hidden="true"><span class="icon icon-link"></span></a>Postscript</h2>\n<p>If you want to open your LVM from within an other (live-)system these commands can come in handy:</p>\n<pre class="language-text">cryptsetup luksOpen /dev/sd??\nsudo pvscan\nsudo vgscan\nsudo lvscan\nsudo vgchange -a y</pre>\n'}},{node:{title:"Fedora 28 Installation Notes",path:"/fedora-28-installation-notes",date:"14. March 2019",timeToRead:3,description:"How to setup fedora 28",coverImage:null,content:'<p>#Fedora 28 Installation Notes</p>\n<p>Steps to install and set up <a href="https://getfedora.org/en/workstation/" target="_blank" rel="nofollow noopener noreferrer">Fedora Workstation</a> on my desktop machine.</p>\n<h3 id="download-and-other-links"><a href="#download-and-other-links" aria-hidden="true"><span class="icon icon-link"></span></a>Download and other links</h3>\n<ul>\n<li>Notes from the previous <a href="https://gist.github.com/misho-kr/8034617" target="_blank" rel="nofollow noopener noreferrer">Fedora 20 Installation</a></li>\n</ul>\n<h3 id="preparations"><a href="#preparations" aria-hidden="true"><span class="icon icon-link"></span></a>Preparations</h3>\n<h3 id="backup-of-old-machines-filesystem"><a href="#backup-of-old-machines-filesystem" aria-hidden="true"><span class="icon icon-link"></span></a>Backup of old machine\'s filesystem</h3>\n<h4 id="system-configuration"><a href="#system-configuration" aria-hidden="true"><span class="icon icon-link"></span></a>System configuration</h4>\n<pre class="language-text">#\n# /etc/fstab\n# Created by anaconda on Sat Jun 16 23:18:44 2018\n#\n# Accessible filesystems, by reference, are maintained under &#39;/dev/disk&#39;\n# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\n#\n/dev/mapper/SSD--M2-root /                      ext4    defaults,noatime   1 1\nUUID=ee59ca64-544b-441b-82c6-58b88c43172a /boot ext4    defaults,noatime   1 2\nUUID=4AFB-A0F0          /boot/efi               vfat    umask=0077,shortname=winnt 0 2\n/dev/mapper/HDD--2-var  /var                    ext4    defaults,noatime   1 2\n/dev/mapper/HDD--2-swap swap                    swap    defaults           0 0\n\n/dev/mapper/luks-7affe2a0-aff3-48f0-b0e8-0c166ede95d3 /home    ext4  defaults,noatime,x-systemd.device-timeout=0 1 2\n\n# space --------------------------------------------------------------\n\n/dev/mapper/HDD--1-backup  /space/backup        ext4    defaults,noatime 1 2\n\n# windows 10 ---------------------------------------------------------\n\nUUID=C880F74780F73A90   /win10/recovery         ntfs    default,ro      0 0\nUUID=DA062A4E062A2BC7   /win10/os               ntfs    default,ro      0 0\nUUID=53EFC79A0A554590   /win10/data             ntfs    default,rw,uid=1000,gid=1000 0 0\nUUID=30DDD99F63BFA995   /win10/temp             ntfs    default,rw,uid=1000,gid=1000 0 0\n\n# --------------------------------------------------------------------\n# eof\n#</pre>\n<h4 id="user-account-and-files"><a href="#user-account-and-files" aria-hidden="true"><span class="icon icon-link"></span></a>User account and files</h4>\n<ul>\n<li>Create a user account for family member, match the accounts on my other machines I have. No central user database as I don\'t want to have to run a server 24/7 to host LDAP, Kerberos, NIS, etc. Add my user to sudoers list.</li>\n<li>Restore user home directories, be careful to selectively skip the hidden ".something" files. In the past I had problems due to these outdated config files when upgrading to newer version of Gnome desktop, Gnome Evolution an other software packagges</li>\n<li>Restore all additional user filesystems from the backup files -- Downloads, Documents, Multimedia, etc.</li>\n</ul>\n<h3 id="video-card-and-gpu"><a href="#video-card-and-gpu" aria-hidden="true"><span class="icon icon-link"></span></a>Video Card and GPU</h3>\n<ul>\n<li>Install <a href="https://www.nvidia.com/Download/index.aspx" target="_blank" rel="nofollow noopener noreferrer">NVIDIA driver for Linux</a>, choose Beta or Stable version</li>\n<li>Download <a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html" target="_blank" rel="nofollow noopener noreferrer">CUDA Toolkit 9.2</a></li>\n<li>Choose <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&#x26;target_arch=x86_64&#x26;target_distro=Fedora&#x26;target_version=27&#x26;target_type=runfilelocal" target="_blank" rel="nofollow noopener noreferrer">local installer</a> and download the toolkit and all available patches</li>\n<li>Remove previos installations, if another installation method had been used</li>\n<li>Run <code class="language-text">sudo sh cuda_9.2.148_396.37_linux.run</code> and <strong>do not agree</strong> to install a video driver, only the toolkit</li>\n<li>Update LD<em>LIBRARY_PATH to point to the CUDA _lib</em> folder</li>\n<li>Run <em>nvidia-smi</em> to inspect the GPU, then build the examples and run some</li>\n<li>Install cuDNN 7.1.4 -- <a href="https://docs.nvidia.com/deeplearning/sdk/index.html" target="_blank" rel="nofollow noopener noreferrer">NVIDIA Deep Learning SDK</a>, requires free account with NVIDIA Developer Program</li>\n<li>Install NCCL 2.2.13 -- <a href="https://developer.nvidia.com/nccl" target="_blank" rel="nofollow noopener noreferrer">NVIDIA Collective Communications Library</a></li>\n</ul>\n<h3 id="ml-and-deep-learning-frameworks"><a href="#ml-and-deep-learning-frameworks" aria-hidden="true"><span class="icon icon-link"></span></a>ML and Deep Learning Frameworks</h3>\n<ul>\n<li>Install <a href="https://www.anaconda.com/distribution/" target="_blank" rel="nofollow noopener noreferrer">Anaconda</a> to use <a href="https://conda.io/docs/user-guide/tasks/manage-environments.html" target="_blank" rel="nofollow noopener noreferrer">Conda environments</a> and channels for these tasks</li>\n<li>For Intel processors, use this Intel channel to <a href="https://towardsdatascience.com/optimize-your-cpu-for-deep-learning-424a199d7a87" target="_blank" rel="nofollow noopener noreferrer">Optimize your CPU for Deep Learning</a></li>\n</ul>\n<pre class="language-bash"><span class="token operator">></span> conda create -n intel -c intel intelpython3_full\n<span class="token operator">></span> conda activate intel\n<span class="token operator">></span> conda <span class="token function">install</span> tensorflow-mkl\n<span class="token operator">></span> pip <span class="token function">install</span> intel-tensorflow\n<span class="token operator">></span> conda <span class="token function">install</span> keras -c intel\n<span class="token operator">></span> conda <span class="token function">install</span> jupyter -c intel</pre>\n<ul>\n<li>\n<p>Build TensorFlow from <a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="nofollow noopener noreferrer">source</a></p>\n<ul>\n<li>Create conda environment with GCC 7.1 and Python 3.6</li>\n<li>Download and install <em>bazel</em></li>\n<li>Kick off the build which is quite long</li>\n</ul>\n</li>\n<li>Install <a href="https://pytorch.org/docs/stable/index.html" target="_blank" rel="nofollow noopener noreferrer">PyTorch</a> and <a href="https://keras.io/#keras-the-python-deep-learning-library" target="_blank" rel="nofollow noopener noreferrer">Keras</a></li>\n</ul>\n<h4 id="links"><a href="#links" aria-hidden="true"><span class="icon icon-link"></span></a>Links:</h4>\n<ul>\n<li><a href="http://www.python36.com/how-to-install-tensorflow-gpu-with-cuda-9-2-for-python-on-ubuntu" target="_blank" rel="nofollow noopener noreferrer">How to install Tensorflow GPU with CUDA 9.2 for python on Ubuntu</a></li>\n<li><a href="https://hackernoon.com/up-and-running-with-ubuntu-nvidia-cuda-cudnn-tensorflow-and-pytorch-a54ec2ec907d" target="_blank" rel="nofollow noopener noreferrer">Up and Running with Ubuntu, Nvidia, Cuda, CuDNN, TensorFlow, and PyTorch</a></li>\n</ul>\n<h3 id="software-packages"><a href="#software-packages" aria-hidden="true"><span class="icon icon-link"></span></a>Software Packages</h3>\n<h4 id="gnome-3"><a href="#gnome-3" aria-hidden="true"><span class="icon icon-link"></span></a>Gnome 3</h4>\n<p>If using Chrome browser start with <a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep" target="_blank" rel="nofollow noopener noreferrer">GNOME Shell integration</a>, for Debian, Fedora, Gentoo and Ubuntu you can install package named "chrome-gnome-shell". This extension provides integration with GNOME Shell and the corresponding extensions repository <a href="https://extensions.gnome.org" target="_blank" rel="nofollow noopener noreferrer">https://extensions.gnome.org</a></p>\n<ul>\n<li><a href="https://extensions.gnome.org/extension/545/hide-top-bar" target="_blank" rel="nofollow noopener noreferrer">Hide top bar</a></li>\n<li><a href="https://extensions.gnome.org/extension/906/sound-output-device-chooser/" target="_blank" rel="nofollow noopener noreferrer">Sound Input &#x26; Output Device Chooser</a></li>\n<li><a href="https://extensions.gnome.org/extension/841/freon/" target="_blank" rel="nofollow noopener noreferrer">Freon</a></li>\n<li><a href="https://extensions.gnome.org/extension/72/recent-items" target="_blank" rel="nofollow noopener noreferrer">Recent Items</a></li>\n<li><a href="https://extensions.gnome.org/extension/1267/no-title-bar/" target="_blank" rel="nofollow noopener noreferrer">No Title Bar</a></li>\n<li><a href="https://extensions.gnome.org/extension/769/gnotetomboy-integration/" target="_blank" rel="nofollow noopener noreferrer">Gnote/Tomboy Integration</a></li>\n<li><a href="https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/" target="_blank" rel="nofollow noopener noreferrer">Bing Wallpaper Changer</a></li>\n<li><a href="https://extensions.gnome.org/extension/55/media-player-indicator/" target="_blank" rel="nofollow noopener noreferrer">Media Player Indicator</a></li>\n<li><a href="https://extensions.gnome.org/extension/1388/adjust-brightness-icon/" target="_blank" rel="nofollow noopener noreferrer">Adjust Brightness Icon</a></li>\n</ul>\n<p>To list all installed extensions and to manage them, go to <a href="https://extensions.gnome.org/local" target="_blank" rel="nofollow noopener noreferrer">installed extensions</a>.</p>\n<ul>\n<li><a href="https://fedoramagazine.org/tweaking-the-look-of-fedora-workstation-with-themes/" target="_blank" rel="nofollow noopener noreferrer">Changing the theme of Fedora Workstation</a></li>\n</ul>\n<pre class="language-bash"><span class="token operator">></span> dnf <span class="token function">install</span> gnome-tweak-tool\n<span class="token operator">></span> dnf search gtk <span class="token operator">|</span> <span class="token function">grep</span> theme\n<span class="token operator">></span> dnf search <span class="token punctuation">[</span>shell-theme <span class="token operator">|</span> icon-theme <span class="token operator">|</span> cursor-theme<span class="token punctuation">]</span></pre>\n<h4 id="sublimetext-3"><a href="#sublimetext-3" aria-hidden="true"><span class="icon icon-link"></span></a>SublimeText 3</h4>\n<ul>\n<li><a href="https://packagecontrol.io/installation#st3" target="_blank" rel="nofollow noopener noreferrer">Package Control</a> is a must!</li>\n<li><a href="https://packagecontrol.io/packages/SML%20%28Standard%20ML%29" target="_blank" rel="nofollow noopener noreferrer">SML (Standard ML)</a></li>\n<li><a href="https://packagecontrol.io/packages/GoSublime" target="_blank" rel="nofollow noopener noreferrer">GoSublime</a></li>\n<li><a href="https://packagecontrol.io/packages/GoTools" target="_blank" rel="nofollow noopener noreferrer">GoTools</a></li>\n<li><a href="https://github.com/golang/sublime-build" target="_blank" rel="nofollow noopener noreferrer">Golang Build</a></li>\n<li><a href="https://packagecontrol.io/packages/GitHub%20Markdown%20Snippets" target="_blank" rel="nofollow noopener noreferrer">GitHub Markdown Snippets</a></li>\n<li><a href="https://packagecontrol.io/packages/GitHub%20Flavored%20Markdown%20Preview" target="_blank" rel="nofollow noopener noreferrer">Git​Hub Flavored Markdown Preview</a></li>\n<li><a href="https://packagecontrol.io/packages/Monokai%20-%20Spacegray" target="_blank" rel="nofollow noopener noreferrer">Monokai - Spacegray</a></li>\n<li><strong><a href="https://packagecontrol.io/packages/Theme%20-%20Seti%20Monokai" target="_blank" rel="nofollow noopener noreferrer">Theme - Seti Monokai</a></strong></li>\n<li><a href="https://packagecontrol.io/packages/Theme%20-%20Flatland" target="_blank" rel="nofollow noopener noreferrer">Theme - Flatland</a></li>\n</ul>\n<h3 id="more-and-more"><a href="#more-and-more" aria-hidden="true"><span class="icon icon-link"></span></a>More and more</h3>\n<ul>\n<li>\n<p>Public Cloud tools</p>\n<ul>\n<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-linux.html" target="_blank" rel="nofollow noopener noreferrer">AWS cli</a></li>\n<li><a href="">GCloud</a></li>\n</ul>\n</li>\n</ul>\n'}},{node:{title:"How to Install Laravel on Arch Linux",path:"/how-to-install-laravel-on-arch-linux",date:"8. February 2019",timeToRead:1,description:"Get up and running with Laravel PHP framework",coverImage:null,content:'<h2 id="install-composer"><a href="#install-composer" aria-hidden="true"><span class="icon icon-link"></span></a>Install Composer</h2>\n<pre class="language-text">$ curl -sS https://getcomposer.org/installer | php\n$ sudo mv composer.phar /usr/local/bin/composer</pre>\n<p>Make sure you have /usr/local/bin in your PATH.</p>\n<h2 id="install-laravel-globally"><a href="#install-laravel-globally" aria-hidden="true"><span class="icon icon-link"></span></a>Install Laravel Globally</h2>\n<pre class="language-text">$ composer global require &quot;laravel/installer&quot;</pre>\n<h3 id="adding-path-to-your-bash_profile"><a href="#adding-path-to-your-bash_profile" aria-hidden="true"><span class="icon icon-link"></span></a>Adding PATH to your .bash_profile</h3>\n<pre class="language-text">$ nano ~/.bash_profile\nexport PATH=&quot;/Users/[your_home]/.composer/vendor/bin:$PATH&quot;</pre>\n<p>exit your terminal</p>\n<h3 id="create-new-laravel-project"><a href="#create-new-laravel-project" aria-hidden="true"><span class="icon icon-link"></span></a>Create new laravel project</h3>\n<pre class="language-text">$ laravel new blog</pre>\n<h3 id="runs-your-project"><a href="#runs-your-project" aria-hidden="true"><span class="icon icon-link"></span></a>Runs your project</h3>\n<pre class="language-text">$ cd blog\n$ php artisan serve --host 0.0.0.0 --port 8000</pre>\n'}},{node:{title:"Meaningful Mobile Typography",path:"/meaningful-mobile-typography",date:"7. February 2019",timeToRead:1,description:"Better typography for mobile",coverImage:null,content:'<h1 id="rocket-meaningful-mobile-typography"><a href="#rocket-meaningful-mobile-typography" aria-hidden="true"><span class="icon icon-link"></span></a>:rocket: Meaningful Mobile Typography</h1>\n<ol>\n<li>Sans serif typeface is easier to read on the screen .</li>\n<li>Text color mostly used : { <code class="language-text">Black</code> -- <code class="language-text">White</code> -- <code class="language-text">Gray</code> }.</li>\n<li>Common text color that mostly used : { <code class="language-text">#ododod</code> -- <code class="language-text">#0f0f0f</code> -- <code class="language-text">#141414</code>}.</li>\n<li>Use some spaces between words to add more readability to your website .</li>\n<li>Line height as <code class="language-text">Golden Ratio = 1.618</code>.</li>\n<li>Add alignment : <code class="language-text">Left</code> -- <code class="language-text">Center</code> -- <code class="language-text">Right</code> .</li>\n<li>Avoid : <code class="language-text">Justify</code> text.</li>\n<li>Use <code class="language-text">Left</code> alignment for larger blocks of text.</li>\n<li>Use <code class="language-text">Center</code> alignment for short bit of a text or special.</li>\n<li>Try to mixing <code class="language-text">Center</code> and <code class="language-text">Left</code> justified option.</li>\n<li>If text is aligned well , users will easly be able to consume your content .</li>\n<li>Users should not have to pinch and zoom to read the words on the screen .</li>\n<li>Creating hierarchy for most designs , from <code class="language-text">Left</code> to <code class="language-text">Right</code> &#x26; <code class="language-text">Top</code> to <code class="language-text">Bottom</code> .</li>\n<li>\n<p>The visual hierarchy need just two or three level of typography :</p>\n<ol>\n<li>----- Headline .</li>\n<li>----- Byline .</li>\n<li>----- BodyText .</li>\n</ol>\n</li>\n<li>\n<p>You can use : </p>\n<ol>\n<li>----- Headline ===> Sans serif .</li>\n<li>----- Byline ===> Serif .</li>\n<li>----- BodyText ===> Serif .</li>\n</ol>\n</li>\n<li>Responsive text you must use : <code class="language-text">rem</code> -- <code class="language-text">em</code> .</li>\n</ol>\n'}}]}}}}}}]);